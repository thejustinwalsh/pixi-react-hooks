{"version":3,"sources":["/Users/tjw/Developer/pixi-react-hooks/dist/suspense/index.cjs","../../src/assets/suspense/useAssets.ts","../../src/assets/suspense/useAssetBundle.ts","../../src/assets/suspense/useAssetManifest.ts"],"names":["Assets","use"],"mappings":"AAAA;AACE;AACA;AACA;AACA;AACA;AACF,yDAA8B;AAC9B;AACA;ACRA,8BAAkB;AAGlB,iCAA2C;AAMpC,SAAS,SAAA,CAAa,IAAA,EAA+D;AAC1F,EAAA,MAAM,EAAC,KAAA,EAAO,SAAQ,EAAA,EAAI,6CAAA,IAAiB,EAAM,0BAAA,EAAU,cAAA,CAAO,IAAA,EAAM,yBAAO,CAAA;AAE/E,EAAA,OAAO,KAAA,CAAM,SAAA,EAAW,KAAA,CAAM,KAAA,EAAO,wBAAA,QAAY,CAAA;AACnD;ADEA;AACA;AEhBA;AACA;AAMO,SAAS,cAAA,CAAe,OAAA,EAA4B;AACzD,EAAA,MAAM,EAAC,KAAA,EAAO,SAAQ,EAAA,EAAI,6CAAA,OAExB,EAAS,gCAAA,EAAgBA,cAAAA,CAAO,UAAA,EAAY,+BAAa,CAAA;AAE3D,EAAA,OAAO,KAAA,CAAM,SAAA,EAAW,KAAA,CAAM,KAAA,EAAOC,wBAAAA,QAAY,CAAA;AACnD;AFUA;AACA;AGxBA;AACA;AAIO,SAAS,gBAAA,CACd,QAAA,EACA,QAAA,EAAoB,CAAC,CAAA,EACrB,QAAA,EAA+D,CAAC,CAAA,EAChE;AACA,EAAA,MAAM,CAAC,QAAQ,EAAA,EAAI,6BAAA;AAAA,IAAoC,CAAA,EAAA,GACrDD,cAAAA,CAAO,IAAA,CAAK,EAAC,GAAG,OAAA,EAAS,SAAQ,CAAC,CAAA,CAAE,IAAA;AAAA,MAAK,CAAA,EAAA,GACvCA,cAAAA,CAAO,oBAAA;AAAA,QACL,OAAA,CAAQ,OAAA,EAAS,EAAA,EAAI,QAAA,EAAU,QAAA,CAAS,OAAA,CAAQ,GAAA,CAAI,CAAA,MAAA,EAAA,GAAU,MAAA,CAAO,IAAI;AAAA,MAC3E;AAAA,IACF;AAAA,EACF,CAAA;AAEA,EAAA,OAAOC,wBAAAA,QAAY,CAAA;AACrB;AHkBA;AACE;AACA;AACA;AACF,oHAAC","file":"/Users/tjw/Developer/pixi-react-hooks/dist/suspense/index.cjs","sourcesContent":[null,"import {use} from 'react';\nimport {useAssetState} from '../hooks/useAssetState';\n\nimport {Assets, type UnresolvedAsset} from 'pixi.js';\nimport {isLoaded, resolve} from '../utils';\n\nexport function useAssets<T>(urls: string | UnresolvedAsset): T;\nexport function useAssets<T>(urls: string[] | UnresolvedAsset[]): Record<string, T>;\n\nexport function useAssets<T>(urls: string | UnresolvedAsset | string[] | UnresolvedAsset[]) {\n  const {state, thenable} = useAssetState<T>(urls, isLoaded, Assets.load, resolve);\n\n  return state.isLoaded ? state.data : use(thenable);\n}\n","import {use} from 'react';\nimport {Assets} from 'pixi.js';\nimport {useAssetState} from '../hooks/useAssetState';\nimport {isBundleLoaded, resolveBundle} from '../utils';\n\nimport type {ResolvedAsset} from 'pixi.js';\n\nexport function useAssetBundle(bundles: string | string[]) {\n  const {state, thenable} = useAssetState<\n    Record<string, ResolvedAsset> | Record<string, Record<string, ResolvedAsset>>\n  >(bundles, isBundleLoaded, Assets.loadBundle, resolveBundle);\n\n  return state.isLoaded ? state.data : use(thenable);\n}\n","import {use, useState} from 'react';\nimport {Assets} from 'pixi.js';\n\nimport type {AssetsManifest} from 'pixi.js';\n\nexport function useAssetManifest(\n  manifest: AssetsManifest,\n  bundles: string[] = [],\n  options: Omit<Parameters<typeof Assets.init>[0], 'manifest'> = {},\n) {\n  const [thenable] = useState<Promise<void> | undefined>(() =>\n    Assets.init({...options, manifest}).then(() =>\n      Assets.backgroundLoadBundle(\n        bundles.length > 0 ? bundles : manifest.bundles.map(bundle => bundle.name),\n      ),\n    ),\n  );\n\n  return use(thenable);\n}\n"]}