{"version":3,"sources":["/Users/tjw/Developer/pixi-react-hooks/dist/chunk-NFSDAYNN.cjs","../src/utils/index.ts","../src/hooks/useAssetCache.ts","../src/hooks/useWarnOnRemount.ts"],"names":["key","acc","isLoaded","load","resolve","useEffect"],"mappings":"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","file":"/Users/tjw/Developer/pixi-react-hooks/dist/chunk-NFSDAYNN.cjs","sourcesContent":[null,"import {Assets} from 'pixi.js';\n\nimport type {UnresolvedAsset} from 'pixi.js';\n\nexport const key = (url: string | UnresolvedAsset) =>\n  typeof url === 'string' ? url : (url.alias ?? url.src ?? '')?.toString();\n\nexport const createKey = (urls: string | UnresolvedAsset | string[] | UnresolvedAsset[]) =>\n  new Set(Array.isArray(urls) ? urls.map(key) : [key(urls)]);\n\nexport const hashKey = (key: Set<string>) => {\n  return Array.from(key).sort().join('|');\n};\n\nexport const didKeyChange = (\n  urls: string | UnresolvedAsset | string[] | UnresolvedAsset[],\n  keys: Set<string>,\n) => (Array.isArray(urls) ? !urls.every(url => keys.has(key(url))) : !keys.has(key(urls)));\n\nexport const isLoaded = (urls: string | UnresolvedAsset | string[] | UnresolvedAsset[]) =>\n  Array.isArray(urls) ? urls.every(url => Assets.cache.has(key(url))) : Assets.cache.has(key(urls));\n\nexport const isBundleLoaded = (bundles: string | string[]) =>\n  Array.isArray(bundles)\n    ? bundles.every(bundle => Assets.resolver.hasBundle(bundle))\n    : Assets.resolver.hasBundle(bundles);\n\nexport const load = (urls: string | UnresolvedAsset | string[] | UnresolvedAsset[]) =>\n  Assets.load(urls);\n\nexport const loadBundle = <T = unknown>(bundles: string | string[]): Promise<T> =>\n  Assets.loadBundle(bundles);\n\nexport const resolve = <T = unknown>(\n  urls: string | UnresolvedAsset | string[] | UnresolvedAsset[],\n) =>\n  Array.isArray(urls)\n    ? urls.reduce((acc, url) => {\n        const k = key(url);\n        if (Assets.cache.has(k)) acc[k] = Assets.cache.get(k);\n        return acc;\n      }, {} as Record<string, T>)\n    : Assets.cache.get(key(urls));\n\nexport const resolveBundle = <T = unknown>(bundles: string | string[]) => {\n  const bundleArray = Array.isArray(bundles) ? bundles : [bundles];\n  return bundleArray.reduce((acc, bundle) => {\n    const assetMap = Assets.resolver.resolveBundle(bundle);\n    const assets = Object.keys(assetMap).reduce((acc, asset) => {\n      const k = key(asset);\n      if (Assets.cache.has(k)) acc[k] = Assets.cache.get(k);\n      return acc;\n    }, {} as Record<string, T>);\n    return {...acc, ...assets};\n  }, {} as any); // eslint-disable-line @typescript-eslint/no-explicit-any\n};\n\nexport const remove = (urls?: string | UnresolvedAsset | string[] | UnresolvedAsset[]) => {\n  if (urls) {\n    Array.isArray(urls)\n      ? urls.forEach(url => Assets.cache.remove(key(url)))\n      : Assets.cache.remove(key(urls));\n  } else {\n    Assets.cache.reset();\n  }\n};\n\nexport function cached<T>(cache: Map<string, Promise<T>>, key: Set<string>) {\n  const k = hashKey(key);\n  return cache.get(k);\n}\n","import {useEffect, useMemo} from 'react';\nimport {useStore, createStore} from 'react-concurrent-store';\nimport {createKey, hashKey, remove} from '../utils';\nimport {AssetUrl} from '../types';\n\ntype AssetCacheValue<T extends unknown = unknown> = {\n  key: Set<string>;\n  data: T | null;\n  promise: Promise<T>;\n  hash?: string;\n};\n\ntype AssetCache<T extends unknown = unknown> = Map<string, Readonly<AssetCacheValue<T>>>;\n\ntype AssetCacheProps<T extends unknown = unknown, P extends AssetUrl = AssetUrl> = {\n  urls: P;\n  isLoaded: (urls: P) => boolean;\n  load: (urls: P) => Promise<T>;\n  resolve: (urls: P) => T;\n};\n\ntype AssetCacheAction<T extends unknown = unknown, P extends AssetUrl = AssetUrl> =\n  | {type: 'update'; payload: Required<AssetCacheValue<T>>}\n  | {type: 'remove'; payload: {urls: P}}\n  | {type: 'set'; payload: Required<AssetCacheValue<T>>}\n  | {type: 'reset'; payload?: boolean};\n\nfunction loadFromCache<T extends unknown, P extends AssetUrl>(\n  cache: AssetCache<T>,\n  {urls, isLoaded, load, resolve}: AssetCacheProps<T, P>,\n): {cached: Required<AssetCacheValue<T>>; hash: string} {\n  const key = createKey(urls);\n  const hash = hashKey(key);\n  const cached = cache.get(hash);\n  if (cached) {\n    return {hash, cached: cached as Required<AssetCacheValue<T>>} as const;\n  }\n\n  const loaded = isLoaded(urls);\n  const data = loaded ? resolve(urls) : null;\n  const promise = loaded\n    ? (Promise.resolve(data) as Promise<T>)\n    : load(urls).finally(() =>\n        store.update({\n          type: 'set',\n          payload: {\n            key,\n            data,\n            promise,\n            hash,\n          },\n        }),\n      );\n  return {hash, cached: {key, data, promise, hash}} as const;\n}\n\nconst storeReducer = <T extends unknown = unknown, P extends AssetUrl = AssetUrl>(\n  current: AssetCache<T>,\n  action: AssetCacheAction<T, P>,\n) => {\n  switch (action.type) {\n    case 'update': {\n      return new Map(current).set(action.payload.hash, action.payload);\n    }\n    case 'remove': {\n      remove(action.payload.urls);\n      const key = createKey(action.payload.urls);\n      const hash = hashKey(key);\n      current.delete(hash);\n      return new Map(current);\n    }\n    // set: Direct cache mutation, skip re-render\n    case 'set': {\n      return current.set(action.payload.hash, action.payload);\n    }\n    // reset: Direct cache clear, then trigger a re-render\n    case 'reset': {\n      if (action.payload) {\n        remove();\n      }\n      current.clear();\n      return new Map(current);\n    }\n  }\n};\n\nconst store = createStore<AssetCache, AssetCacheAction>(new Map(), storeReducer);\n\nexport function unsafeClearCache() {\n  // @ts-expect-error\n  store._current = store._sync = store._transition = new Map();\n}\n\nexport function clear() {\n  store.update({type: 'reset', payload: true});\n}\n\nexport function refresh() {\n  store.update({type: 'reset'});\n}\n\nexport function reset(keys?: string[]) {\n  if (keys) {\n    store.update({\n      type: 'remove',\n      payload: {urls: keys},\n    });\n  } else {\n    store.update({\n      type: 'reset',\n    });\n  }\n}\n\nexport function useAssetCacheActions() {\n  return {clear, reset, refresh};\n}\n\nexport function useAssetCache<T extends unknown, P extends AssetUrl>({\n  urls,\n  isLoaded,\n  load,\n  resolve,\n}: AssetCacheProps<T, P>) {\n  const cache = useStore<AssetCache<T>>(store);\n  const current = useMemo(() => {\n    return loadFromCache<T, P>(cache, {urls, isLoaded, load, resolve});\n  }, [cache, urls, isLoaded, load, resolve]);\n  const cached = useMemo(() => cache.get(current.hash) ?? null, [cache, current.hash]);\n\n  useEffect(() => {\n    if (!cached) {\n      store.update({\n        type: 'update',\n        payload: current.cached,\n      });\n    }\n  }, [cached, current.cached]);\n\n  return cached ?? current.cached;\n}\n","import {useEffect} from 'react';\n\ntype InitOnceHook = Function & {hasMountedTag?: string};\n\nconst noop = (_hook: InitOnceHook) => {};\n\nexport const useWarnOnRemount =\n  // @ts-ignore -- dev only\n  process.env.NODE_ENV === 'production'\n    ? noop\n    : (hook: InitOnceHook) => {\n        useEffect(() => {\n          if (hook.hasMountedTag === console.log.name) {\n            console.warn(`${hook.name} should only be mounted once during the lifetime of the app`);\n          } else if (hook.hasMountedTag === undefined) {\n            hook.hasMountedTag = console.log.name;\n          }\n        }, []); // eslint-disable-line react-hooks/exhaustive-deps\n      };\n"]}