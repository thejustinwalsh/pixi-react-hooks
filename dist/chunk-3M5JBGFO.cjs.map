{"version":3,"sources":["/Users/tjw/Developer/pixi-react-hooks/dist/chunk-3M5JBGFO.cjs","../src/utils/index.ts","../src/hooks/useAssetState.ts","../src/hooks/useAssetCache.ts"],"names":["key","load","isLoaded","resolve","state"],"mappings":"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","file":"/Users/tjw/Developer/pixi-react-hooks/dist/chunk-3M5JBGFO.cjs","sourcesContent":[null,"import {Assets} from 'pixi.js';\n\nimport type {UnresolvedAsset} from 'pixi.js';\n\nexport const key = (url: string | UnresolvedAsset) =>\n  typeof url === 'string' ? url : (url.alias ?? url.src ?? '')?.toString();\n\nexport const createKey = (urls: string | UnresolvedAsset | string[] | UnresolvedAsset[]) =>\n  new Set(Array.isArray(urls) ? urls.map(key) : [key(urls)]);\n\nexport const didKeyChange = (\n  urls: string | UnresolvedAsset | string[] | UnresolvedAsset[],\n  keys: Set<string>,\n) => (Array.isArray(urls) ? !urls.every(url => keys.has(key(url))) : !keys.has(key(urls)));\n\nexport const isLoaded = (urls: string | UnresolvedAsset | string[] | UnresolvedAsset[]) =>\n  Array.isArray(urls) ? urls.every(url => Assets.cache.has(key(url))) : Assets.cache.has(key(urls));\n\nexport const isBundleLoaded = (bundles: string | string[]) =>\n  Array.isArray(bundles)\n    ? bundles.every(bundle => Assets.resolver.hasBundle(bundle))\n    : Assets.resolver.hasBundle(bundles);\n\nexport const load = (urls: string | UnresolvedAsset | string[] | UnresolvedAsset[]) =>\n  Assets.load(urls);\n\nexport const loadBundle = <T = any>(bundles: string | string[]): Promise<T> =>\n  Assets.loadBundle(bundles);\n\nexport const resolve = <T = any>(urls: string | UnresolvedAsset | string[] | UnresolvedAsset[]) =>\n  Array.isArray(urls)\n    ? urls.reduce((acc, url) => {\n        const k = key(url);\n        if (Assets.cache.has(k)) acc[k] = Assets.cache.get(k);\n        return acc;\n      }, {} as Record<string, T>)\n    : Assets.cache.get(key(urls));\n\nexport const resolveBundle = <T = any>(bundles: string | string[]) =>\n  Assets.resolver.resolveBundle(bundles) as T;\n","import React, {useMemo} from 'react';\nimport {useEffect, useState} from 'react';\nimport {didKeyChange, createKey} from '../utils';\nimport {loadFromCache, usePromiseCache} from './useAssetCache';\n\nimport type {\n  AssetState,\n  HookState,\n  PendingAssetState,\n  LoadedAssetState,\n  ErrorAssetState,\n  AssetUrl,\n} from '../types';\n\ntype LoadedAssetStateReturn<T> = readonly [\n  LoadedAssetState<T>,\n  React.Dispatch<React.SetStateAction<AssetState<T>>>,\n  Promise<T> | null,\n];\n\ntype PendingAssetStateReturn<T> = readonly [\n  PendingAssetState,\n  React.Dispatch<React.SetStateAction<AssetState<T>>>,\n  Promise<T>,\n];\n\ntype ErrorAssetStateReturn<T> = readonly [\n  ErrorAssetState,\n  React.Dispatch<React.SetStateAction<AssetState<T>>>,\n  Promise<T>,\n];\n\ntype AssetStateReturn<T> =\n  | LoadedAssetStateReturn<T>\n  | PendingAssetStateReturn<T>\n  | ErrorAssetStateReturn<T>;\n\nexport function useAssetState<T, P extends AssetUrl>(\n  urls: P,\n  isLoaded: (urls: P) => boolean,\n  load: <T>(urls: P) => Promise<T>,\n  resolve: <T>(urls: P) => T,\n): AssetStateReturn<T> {\n  const key = useMemo(() => createKey(urls), [urls]);\n  const cache = usePromiseCache<T>();\n  const [assetState, setAssetState] = useState<AssetState<T>>(() => {\n    const loaded = isLoaded(urls);\n    return loaded\n      ? {\n          status: 'loaded',\n          isLoaded: true,\n          error: null,\n          data: resolve(urls),\n        }\n      : {\n          status: 'pending',\n          isLoaded: false,\n          error: null,\n          data: null,\n        };\n  });\n\n  const [state, setState] = useState<HookState<T>>(() => ({\n    thenable: !assetState.isLoaded ? loadFromCache(cache, key, () => load(urls)) : null,\n    key,\n  }));\n\n  useEffect(() => {\n    if (didKeyChange(urls, state.key)) {\n      if (isLoaded(urls)) {\n        setAssetState({status: 'loaded', isLoaded: true, error: null, data: resolve(urls)});\n        setState(state => ({...state, key}));\n      } else {\n        setState({thenable: loadFromCache(cache, key, () => load(urls)), key});\n        setAssetState({status: 'pending', isLoaded: false, error: null, data: null});\n      }\n    }\n  }, [cache, isLoaded, key, load, resolve, state.key, urls]);\n\n  if (assetState.status === 'error') {\n    return [assetState, setAssetState, state.thenable!] as const;\n  }\n\n  if (assetState.status === 'pending') {\n    return [assetState, setAssetState, state.thenable!] as const;\n  }\n\n  return [assetState, setAssetState, state.thenable!] as const;\n}\n","import React, {useCallback, useTransition} from 'react';\n\nconst getCacheForType = <T>(resourceType: () => T) =>\n  React.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE.A.getCacheForType(\n    resourceType,\n  );\n\nconst useCacheRefresh = () =>\n  React.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE.H.useCacheRefresh();\n\nconst createPromiseCache = <T>() => new Map<string, Promise<T>>();\n\n// TODO: Cache should be a map of keys to promises, and their destination cache with the the asset keys they resolve to\n// TODO: We can allow the user to optionally purge the entire cache or the cache for a specific key\n// TODO: We can not selectively replace specific keys with the public api when refreshing, but we can control the backing cache\n// TODO: When you hit an error boundary for an asset, you may want to try loading the asset again, and if that fails, you may want to purge the cache\n\nexport function loadFromCache<T>(\n  cache: Map<string, Promise<T>>,\n  key: Set<string>,\n  load: () => Promise<T>,\n) {\n  const cacheKey = Array.from(key).join('|');\n  let promise = cache.get(cacheKey);\n  if (!promise) {\n    promise = load();\n    cache.set(cacheKey, promise);\n  }\n  return promise;\n}\n\nexport function usePromiseCache<T>() {\n  return getCacheForType(createPromiseCache<T>);\n}\n\n// TODO: Store keys along with the promises so we can purge the Asset cache when we refresh or clear the cache\nexport function useAssetCache() {\n  //const cache = getPromiseCache();\n  const cacheRefresh = useCacheRefresh();\n  const [isPending, startTransition] = useTransition();\n\n  const refresh = useCallback(\n    (keys?: string[]) => {\n      // When we purge we need to reset the cache for the keys that are being purged\n      startTransition(() => {\n        cacheRefresh();\n      });\n    },\n    [cacheRefresh],\n  );\n\n  const clear = useCallback(\n    (all: boolean = false) => {\n      // TODO: Walk everything in current promise cache and clear it\n      // TODO: If all is set, reset the entire backing cache instead\n      startTransition(() => {\n        cacheRefresh();\n      });\n    },\n    [cacheRefresh],\n  );\n\n  return [isPending, refresh, clear] as const;\n}\n"]}