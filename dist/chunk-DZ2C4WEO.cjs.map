{"version":3,"sources":["/Users/tjw/Developer/pixi-react-hooks/dist/chunk-DZ2C4WEO.cjs","../src/utils/index.ts","../src/hooks/useAssetState.ts"],"names":["isLoaded","load","resolve","state"],"mappings":"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","file":"/Users/tjw/Developer/pixi-react-hooks/dist/chunk-DZ2C4WEO.cjs","sourcesContent":[null,"import {Assets} from 'pixi.js';\n\nimport type {UnresolvedAsset} from 'pixi.js';\n\nexport const key = (url: string | UnresolvedAsset) =>\n  typeof url === 'string' ? url : (url.alias ?? url.src ?? '')?.toString();\n\nexport const createKey = (urls: string | UnresolvedAsset | string[] | UnresolvedAsset[]) =>\n  new Set(Array.isArray(urls) ? urls.map(key) : [key(urls)]);\n\nexport const didKeyChange = (\n  urls: string | UnresolvedAsset | string[] | UnresolvedAsset[],\n  keys: Set<string>,\n) => (Array.isArray(urls) ? !urls.every(url => keys.has(key(url))) : !keys.has(key(urls)));\n\nexport const isLoaded = (urls: string | UnresolvedAsset | string[] | UnresolvedAsset[]) =>\n  Array.isArray(urls) ? urls.every(url => Assets.cache.has(key(url))) : Assets.cache.has(key(urls));\n\nexport const isBundleLoaded = (bundles: string | string[]) =>\n  Array.isArray(bundles)\n    ? bundles.every(bundle => Assets.resolver.hasBundle(bundle))\n    : Assets.resolver.hasBundle(bundles);\n\nexport const load = (urls: string | UnresolvedAsset | string[] | UnresolvedAsset[]) =>\n  Assets.load(urls);\n\nexport const loadBundle = (bundles: string | string[]) => Assets.loadBundle(bundles);\n\nexport const resolve = (urls: string | UnresolvedAsset | string[] | UnresolvedAsset[]) =>\n  Array.isArray(urls)\n    ? urls.reduce((acc, url) => {\n        const k = key(url);\n        if (Assets.cache.has(k)) acc[k] = Assets.cache.get(k);\n        return acc;\n      }, {} as Record<string, any>)\n    : Assets.cache.get(key(urls));\n\nexport const resolveBundle = (bundles: string | string[]) =>\n  Assets.resolver.resolveBundle(bundles) as any;\n","import {useEffect, useState} from 'react';\nimport {didKeyChange, createKey} from '../utils';\n\nimport {Assets, type UnresolvedAsset} from 'pixi.js';\nimport type {AssetState, HookState} from '../types';\n\ntype AssetStateReturn<T> = [\n  AssetState<T>,\n  React.Dispatch<React.SetStateAction<AssetState<T>>>,\n  Promise<T> | null,\n];\n\nexport function useAssetState<T>(\n  urls: string | UnresolvedAsset | string[] | UnresolvedAsset[],\n  isLoaded: (urls: any) => boolean,\n  load: <T>(urls: any) => Promise<T>,\n  resolve: <T>(urls: any) => T,\n): AssetStateReturn<T | Record<string, T> | null> {\n  const [assetState, setAssetState] = useState<AssetState<T | Record<string, T> | null>>(() => {\n    const loaded = isLoaded(urls);\n    return loaded\n      ? {\n          status: 'loaded',\n          isLoaded: true,\n          error: null,\n          data: resolve(urls),\n        }\n      : {\n          status: 'pending',\n          isLoaded: false,\n          error: null,\n          data: null,\n        };\n  });\n\n  const [state, setState] = useState<HookState<T>>(() => ({\n    thenable: !assetState.isLoaded ? load(urls) : null,\n    key: createKey(urls),\n  }));\n\n  useEffect(() => {\n    if (didKeyChange(urls, state.key)) {\n      const assetsLoaded = isLoaded(urls);\n      setState(state => ({\n        thenable: assetsLoaded ? state.thenable : load(urls),\n        key: createKey(urls),\n      }));\n      setAssetState(\n        assetsLoaded\n          ? {status: 'loaded', isLoaded: true, error: null, data: resolve(urls)}\n          : {status: 'pending', isLoaded: false, error: null, data: null},\n      );\n    }\n  }, [urls, state.key, isLoaded, resolve, load]);\n\n  return [assetState, setAssetState, state.thenable] as const;\n}\n"]}