{"version":3,"sources":["/Users/tjw/Developer/pixi-react-hooks/dist/chunk-MCQQOAI5.cjs","../src/utils/index.ts","../src/hooks/useAssetState.ts"],"names":["key","load","isLoaded","resolve","state"],"mappings":"AAAA;ACAA,iCAAqB;AAId,IAAM,IAAA,EAAM,CAAC,GAAA,EAAA,GAClB,OAAO,IAAA,IAAQ,SAAA,EAAW,IAAA,kBAAA,mCAAO,GAAA,CAAI,KAAA,UAAS,GAAA,CAAI,KAAA,UAAO,IAAA,CAAA,2BAAK,QAAA,mBAAS,GAAA;AAElE,IAAM,UAAA,EAAY,CAAC,IAAA,EAAA,GACxB,IAAI,GAAA,CAAI,KAAA,CAAM,OAAA,CAAQ,IAAI,EAAA,EAAI,IAAA,CAAK,GAAA,CAAI,GAAG,EAAA,EAAI,CAAC,GAAA,CAAI,IAAI,CAAC,CAAC,CAAA;AAEpD,IAAM,aAAA,EAAe,CAC1B,IAAA,EACA,IAAA,EAAA,GACI,KAAA,CAAM,OAAA,CAAQ,IAAI,EAAA,EAAI,CAAC,IAAA,CAAK,KAAA,CAAM,CAAA,GAAA,EAAA,GAAO,IAAA,CAAK,GAAA,CAAI,GAAA,CAAI,GAAG,CAAC,CAAC,EAAA,EAAI,CAAC,IAAA,CAAK,GAAA,CAAI,GAAA,CAAI,IAAI,CAAC,CAAA;AAEjF,IAAM,SAAA,EAAW,CAAC,IAAA,EAAA,GACvB,KAAA,CAAM,OAAA,CAAQ,IAAI,EAAA,EAAI,IAAA,CAAK,KAAA,CAAM,CAAA,GAAA,EAAA,GAAO,cAAA,CAAO,KAAA,CAAM,GAAA,CAAI,GAAA,CAAI,GAAG,CAAC,CAAC,EAAA,EAAI,cAAA,CAAO,KAAA,CAAM,GAAA,CAAI,GAAA,CAAI,IAAI,CAAC,CAAA;AAE3F,IAAM,eAAA,EAAiB,CAAC,OAAA,EAAA,GAC7B,KAAA,CAAM,OAAA,CAAQ,OAAO,EAAA,EACjB,OAAA,CAAQ,KAAA,CAAM,CAAA,MAAA,EAAA,GAAU,cAAA,CAAO,QAAA,CAAS,SAAA,CAAU,MAAM,CAAC,EAAA,EACzD,cAAA,CAAO,QAAA,CAAS,SAAA,CAAU,OAAO,CAAA;AAEhC,IAAM,KAAA,EAAO,CAAC,IAAA,EAAA,GACnB,cAAA,CAAO,IAAA,CAAK,IAAI,CAAA;AAEX,IAAM,WAAA,EAAa,CAAU,OAAA,EAAA,GAClC,cAAA,CAAO,UAAA,CAAW,OAAO,CAAA;AAEpB,IAAM,QAAA,EAAU,CAAU,IAAA,EAAA,GAC/B,KAAA,CAAM,OAAA,CAAQ,IAAI,EAAA,EACd,IAAA,CAAK,MAAA,CAAO,CAAC,GAAA,EAAK,GAAA,EAAA,GAAQ;AACxB,EAAA,MAAM,EAAA,EAAI,GAAA,CAAI,GAAG,CAAA;AACjB,EAAA,GAAA,CAAI,cAAA,CAAO,KAAA,CAAM,GAAA,CAAI,CAAC,CAAA,EAAG,GAAA,CAAI,CAAC,EAAA,EAAI,cAAA,CAAO,KAAA,CAAM,GAAA,CAAI,CAAC,CAAA;AACpD,EAAA,OAAO,GAAA;AACT,CAAA,EAAG,CAAC,CAAsB,EAAA,EAC1B,cAAA,CAAO,KAAA,CAAM,GAAA,CAAI,GAAA,CAAI,IAAI,CAAC,CAAA;AAEzB,IAAM,cAAA,EAAgB,CAAU,OAAA,EAAA,GACrC,cAAA,CAAO,QAAA,CAAS,aAAA,CAAc,OAAO,CAAA;ADxBvC;AACA;AEhBA,4EAAkB;AAClB;AAmCA,IAAM,gBAAA,EAAkB,CAAI,YAAA,EAAA,GAC1B,eAAA,CAAM,+DAAA,CAAgE,CAAA,CAAE,eAAA;AAAA,EACtE;AACF,CAAA;AAEF,IAAM,mBAAA,EAAqB,CAAA,EAAA,mBAAS,IAAI,GAAA,CAAwB,CAAA;AAChE,IAAM,gBAAA,EAAkB,CAAA,EAAA,GAAS,eAAA,CAAgB,kBAAqB,CAAA;AAEtE,SAAS,aAAA,CAAiBA,IAAAA,EAAkBC,KAAAA,EAAwB;AAClE,EAAA,MAAM,MAAA,EAAQ,eAAA,CAAmB,CAAA;AACjC,EAAA,MAAM,SAAA,EAAW,KAAA,CAAM,IAAA,CAAKD,IAAG,CAAA,CAAE,IAAA,CAAK,GAAG,CAAA;AAEzC,EAAA,IAAI,QAAA,EAAU,KAAA,CAAM,GAAA,CAAI,QAAQ,CAAA;AAChC,EAAA,GAAA,CAAI,CAAC,OAAA,EAAS,QAAA,EAAUC,KAAAA,CAAK,CAAA;AAE7B,EAAA,KAAA,CAAM,GAAA,CAAI,QAAA,EAAU,OAAO,CAAA;AAC3B,EAAA,OAAO,OAAA;AACT;AAEO,SAAS,aAAA,CACd,IAAA,EACAC,SAAAA,EACAD,KAAAA,EACAE,QAAAA,EACqB;AACrB,EAAA,MAAM,CAAC,UAAA,EAAY,aAAa,EAAA,EAAI,6BAAA,CAAwB,EAAA,GAAM;AAChE,IAAA,MAAM,OAAA,EAASD,SAAAA,CAAS,IAAI,CAAA;AAC5B,IAAA,OAAO,OAAA,EACH;AAAA,MACE,MAAA,EAAQ,QAAA;AAAA,MACR,QAAA,EAAU,IAAA;AAAA,MACV,KAAA,EAAO,IAAA;AAAA,MACP,IAAA,EAAMC,QAAAA,CAAQ,IAAI;AAAA,IACpB,EAAA,EACA;AAAA,MACE,MAAA,EAAQ,SAAA;AAAA,MACR,QAAA,EAAU,KAAA;AAAA,MACV,KAAA,EAAO,IAAA;AAAA,MACP,IAAA,EAAM;AAAA,IACR,CAAA;AAAA,EACN,CAAC,CAAA;AAED,EAAA,MAAM,CAAC,KAAA,EAAO,QAAQ,EAAA,EAAI,6BAAA,CAAuB,EAAA,GAAM;AACrD,IAAA,MAAMH,KAAAA,EAAM,SAAA,CAAU,IAAI,CAAA;AAC1B,IAAA,OAAO;AAAA,MACL,QAAA,EAAU,CAAC,UAAA,CAAW,SAAA,EAAW,aAAA,CAAcA,IAAAA,EAAK,CAAA,EAAA,GAAMC,KAAAA,CAAK,IAAI,CAAC,EAAA,EAAI,IAAA;AAAA,MACxE,GAAA,EAAAD;AAAA,IACF,CAAA;AAAA,EACF,CAAC,CAAA;AAED,EAAA,8BAAA,CAAU,EAAA,GAAM;AACd,IAAA,GAAA,CAAI,YAAA,CAAa,IAAA,EAAM,KAAA,CAAM,GAAG,CAAA,EAAG;AACjC,MAAA,MAAM,aAAA,EAAeE,SAAAA,CAAS,IAAI,CAAA;AAClC,MAAA,QAAA,CAAS,CAAAE,MAAAA,EAAAA,GAAAA,CAAU;AAAA,QACjB,QAAA,EAAU,aAAA,EAAeA,MAAAA,CAAM,SAAA,EAAWH,KAAAA,CAAK,IAAI,CAAA;AAAA,QACnD,GAAA,EAAK,SAAA,CAAU,IAAI;AAAA,MACrB,CAAA,CAAE,CAAA;AACF,MAAA,aAAA;AAAA,QACE,aAAA,EACI,EAAC,MAAA,EAAQ,QAAA,EAAU,QAAA,EAAU,IAAA,EAAM,KAAA,EAAO,IAAA,EAAM,IAAA,EAAME,QAAAA,CAAQ,IAAI,EAAC,EAAA,EACnE,EAAC,MAAA,EAAQ,SAAA,EAAW,QAAA,EAAU,KAAA,EAAO,KAAA,EAAO,IAAA,EAAM,IAAA,EAAM,KAAI;AAAA,MAClE,CAAA;AAAA,IACF;AAAA,EACF,CAAA,EAAG,CAAC,IAAA,EAAM,KAAA,CAAM,GAAA,EAAKD,SAAAA,EAAUC,QAAAA,EAASF,KAAI,CAAC,CAAA;AAE7C,EAAA,GAAA,CAAI,UAAA,CAAW,OAAA,IAAW,OAAA,EAAS;AACjC,IAAA,OAAO,CAAC,UAAA,EAAY,aAAA,EAAe,KAAA,CAAM,QAAS,CAAA;AAAA,EACpD;AAEA,EAAA,GAAA,CAAI,UAAA,CAAW,OAAA,IAAW,SAAA,EAAW;AACnC,IAAA,OAAO,CAAC,UAAA,EAAY,aAAA,EAAe,KAAA,CAAM,QAAS,CAAA;AAAA,EACpD;AAEA,EAAA,OAAO,CAAC,UAAA,EAAY,aAAA,EAAe,KAAA,CAAM,QAAQ,CAAA;AACnD;AFpCA;AACA;AACE;AACA;AACA;AACA;AACA;AACA;AACA;AACF,oOAAC","file":"/Users/tjw/Developer/pixi-react-hooks/dist/chunk-MCQQOAI5.cjs","sourcesContent":[null,"import {Assets} from 'pixi.js';\n\nimport type {UnresolvedAsset} from 'pixi.js';\n\nexport const key = (url: string | UnresolvedAsset) =>\n  typeof url === 'string' ? url : (url.alias ?? url.src ?? '')?.toString();\n\nexport const createKey = (urls: string | UnresolvedAsset | string[] | UnresolvedAsset[]) =>\n  new Set(Array.isArray(urls) ? urls.map(key) : [key(urls)]);\n\nexport const didKeyChange = (\n  urls: string | UnresolvedAsset | string[] | UnresolvedAsset[],\n  keys: Set<string>,\n) => (Array.isArray(urls) ? !urls.every(url => keys.has(key(url))) : !keys.has(key(urls)));\n\nexport const isLoaded = (urls: string | UnresolvedAsset | string[] | UnresolvedAsset[]) =>\n  Array.isArray(urls) ? urls.every(url => Assets.cache.has(key(url))) : Assets.cache.has(key(urls));\n\nexport const isBundleLoaded = (bundles: string | string[]) =>\n  Array.isArray(bundles)\n    ? bundles.every(bundle => Assets.resolver.hasBundle(bundle))\n    : Assets.resolver.hasBundle(bundles);\n\nexport const load = (urls: string | UnresolvedAsset | string[] | UnresolvedAsset[]) =>\n  Assets.load(urls);\n\nexport const loadBundle = <T = any>(bundles: string | string[]): Promise<T> =>\n  Assets.loadBundle(bundles);\n\nexport const resolve = <T = any>(urls: string | UnresolvedAsset | string[] | UnresolvedAsset[]) =>\n  Array.isArray(urls)\n    ? urls.reduce((acc, url) => {\n        const k = key(url);\n        if (Assets.cache.has(k)) acc[k] = Assets.cache.get(k);\n        return acc;\n      }, {} as Record<string, T>)\n    : Assets.cache.get(key(urls));\n\nexport const resolveBundle = <T = any>(bundles: string | string[]) =>\n  Assets.resolver.resolveBundle(bundles) as T;\n","import React from 'react';\nimport {useEffect, useState} from 'react';\nimport {didKeyChange, createKey} from '../utils';\n\nimport type {\n  AssetState,\n  HookState,\n  PendingAssetState,\n  LoadedAssetState,\n  ErrorAssetState,\n  AssetUrl,\n} from '../types';\n\ntype LoadedAssetStateReturn<T> = readonly [\n  LoadedAssetState<T>,\n  React.Dispatch<React.SetStateAction<AssetState<T>>>,\n  Promise<T> | null,\n];\n\ntype PendingAssetStateReturn<T> = readonly [\n  PendingAssetState,\n  React.Dispatch<React.SetStateAction<AssetState<T>>>,\n  Promise<T>,\n];\n\ntype ErrorAssetStateReturn<T> = readonly [\n  ErrorAssetState,\n  React.Dispatch<React.SetStateAction<AssetState<T>>>,\n  Promise<T>,\n];\n\ntype AssetStateReturn<T> =\n  | LoadedAssetStateReturn<T>\n  | PendingAssetStateReturn<T>\n  | ErrorAssetStateReturn<T>;\n\nconst getCacheForType = <T>(resourceType: () => T) =>\n  React.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE.A.getCacheForType(\n    resourceType,\n  );\n\nconst createPromiseCache = <T>() => new Map<string, Promise<T>>();\nconst getPromiseCache = <T>() => getCacheForType(createPromiseCache<T>);\n\nfunction loadFromCache<T>(key: Set<string>, load: () => Promise<T>) {\n  const cache = getPromiseCache<T>();\n  const cacheKey = Array.from(key).join('|');\n\n  let promise = cache.get(cacheKey);\n  if (!promise) promise = load();\n\n  cache.set(cacheKey, promise);\n  return promise;\n}\n\nexport function useAssetState<T, P extends AssetUrl>(\n  urls: P,\n  isLoaded: (urls: P) => boolean,\n  load: <T>(urls: P) => Promise<T>,\n  resolve: <T>(urls: P) => T,\n): AssetStateReturn<T> {\n  const [assetState, setAssetState] = useState<AssetState<T>>(() => {\n    const loaded = isLoaded(urls);\n    return loaded\n      ? {\n          status: 'loaded',\n          isLoaded: true,\n          error: null,\n          data: resolve(urls),\n        }\n      : {\n          status: 'pending',\n          isLoaded: false,\n          error: null,\n          data: null,\n        };\n  });\n\n  const [state, setState] = useState<HookState<T>>(() => {\n    const key = createKey(urls);\n    return {\n      thenable: !assetState.isLoaded ? loadFromCache(key, () => load(urls)) : null,\n      key,\n    };\n  });\n\n  useEffect(() => {\n    if (didKeyChange(urls, state.key)) {\n      const assetsLoaded = isLoaded(urls);\n      setState(state => ({\n        thenable: assetsLoaded ? state.thenable : load(urls),\n        key: createKey(urls),\n      }));\n      setAssetState(\n        assetsLoaded\n          ? {status: 'loaded', isLoaded: true, error: null, data: resolve(urls)}\n          : {status: 'pending', isLoaded: false, error: null, data: null},\n      );\n    }\n  }, [urls, state.key, isLoaded, resolve, load]);\n\n  if (assetState.status === 'error') {\n    return [assetState, setAssetState, state.thenable!] as const;\n  }\n\n  if (assetState.status === 'pending') {\n    return [assetState, setAssetState, state.thenable!] as const;\n  }\n\n  return [assetState, setAssetState, state.thenable] as const;\n}\n"]}